{"version":3,"file":"index.js","sources":["../../../src/docker.ts"],"sourcesContent":["import { restoreCache, saveCache } from '@actions/cache'\nimport { getInput, getState, info, saveState, setOutput } from '@actions/core'\nimport { execShellCommand } from './shell.js'\n\n/**\n * Constants for caching logic.\n */\nconst CACHE_HIT = 'cache-hit'\nconst DOCKER_IMAGES_LIST = 'docker-images-list'\nconst DOCKER_IMAGES_PATH = '~/.docker-images.tar'\n\n/**\n * Command to list Docker images in a format that ensures unique identification.\n * - Named images will be returned as \"repository:tag\".\n * - Untagged images will be identified by their ID.\n */\nconst LIST_COMMAND =\n  \"docker image list --format '\" +\n  '{{ if ne .Repository \"<none>\" }}{{ .Repository }}' +\n  `{{ if ne .Tag \"<none>\" }}:{{ .Tag }}{{ end }}{{ else }}{{ .ID }}{{ end }}'`\n\n/**\n * Loads Docker images from the cache if available; otherwise, records existing images.\n * @returns {Promise<void>}\n */\nconst loadDockerImages = async (): Promise<void> => {\n  try {\n    const requestedKey = getInput('key', { required: true })\n    const restoredKey = await restoreCache([DOCKER_IMAGES_PATH], requestedKey)\n\n    // Determine if a cache hit occurred\n    const cacheHit = requestedKey === restoredKey\n    saveState(CACHE_HIT, cacheHit.toString())\n    setOutput(CACHE_HIT, cacheHit)\n\n    if (cacheHit) {\n      info(`Cache hit: Restoring Docker images from ${DOCKER_IMAGES_PATH}.`)\n      await execShellCommand(`docker load --input ${DOCKER_IMAGES_PATH}`)\n    } else {\n      info(\n        'Cache miss: Recording existing Docker images, including those pre-cached by GitHub Actions.'\n      )\n      const dockerImages = await execShellCommand(LIST_COMMAND)\n      saveState(DOCKER_IMAGES_LIST, dockerImages)\n    }\n  } catch (error) {\n    throw new Error(`Failed to load Docker images: ${(error as Error).message}`)\n  }\n}\n\n/**\n * Saves newly created Docker images to the cache if a cache miss occurred.\n * @returns {Promise<void>}\n */\nconst saveDockerImages = async (): Promise<void> => {\n  try {\n    const key = getInput('key', { required: true })\n\n    if (getState(CACHE_HIT) === 'true') {\n      info(`Cache hit on key ${key}, skipping cache save.`)\n      return\n    }\n\n    if (getInput('read-only') === 'true') {\n      info(\n        `Cache miss on key ${key}, but skipping cache save due to read-only mode.`\n      )\n      return\n    }\n\n    /* Check if another parallel process has already saved a cache with this key */\n    const existingCacheKey = await restoreCache([''], key, [], {\n      lookupOnly: true\n    })\n    if (key === existingCacheKey) {\n      info(\n        `Cache miss occurred earlier, but another process has since saved a cache with key ${key}. Skipping save.`\n      )\n      return\n    }\n\n    // Retrieve preexisting images before the restore step\n    const preexistingImages = getState(DOCKER_IMAGES_LIST).split('\\n')\n\n    info('Fetching current Docker images...')\n    const currentImages = await execShellCommand(LIST_COMMAND)\n    const imagesList = currentImages.split('\\n')\n\n    // Identify new images created after the restore step\n    const newImages = imagesList.filter(\n      (image: string) => image && !preexistingImages.includes(image)\n    )\n\n    if (newImages.length === 0) {\n      info('No new Docker images detected. Skipping cache save.')\n      return\n    }\n\n    info(\n      `Saving ${newImages.length} new Docker images (excluding preexisting images).`\n    )\n\n    const newImagesArgs = newImages.join(' ')\n    const saveCommand = `docker save --output ${DOCKER_IMAGES_PATH} ${newImagesArgs}`\n    await execShellCommand(saveCommand)\n\n    // Save the cached Docker images\n    await saveCache([DOCKER_IMAGES_PATH], key)\n  } catch (error) {\n    throw new Error(`Failed to save Docker images: ${(error as Error).message}`)\n  }\n}\n\nexport {\n  saveDockerImages,\n  loadDockerImages,\n  CACHE_HIT,\n  DOCKER_IMAGES_LIST,\n  DOCKER_IMAGES_PATH\n}\n"],"names":["getInput","restoreCache","saveState","setOutput","info","getState","saveCache"],"mappings":"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"}